import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import { sassPlugin } from 'esbuild-sass-plugin';
import path from "path";
import fs from 'fs';

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const renameCssPlugin = {
	name: 'rename-css',
	setup(build) {
		build.onEnd(() => {
			fs.existsSync('main.css') && fs.renameSync('main.css', 'styles.css');
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts", "src/styles.scss"],
	outdir: ".",
	bundle: true,
	minify: prod,
	plugins: [
		sassPlugin({
			type: 'css',
			filter: /\.scss$/,
		}),
		esbuildSvelte({
			compilerOptions: { css: "injected" },
			preprocess: sveltePreprocess({
				scss: {
					renderSync: true,
					includePaths: [
						path.resolve('./src'),
						path.resolve('./src/lib')
					],
				}
			})
		}),
		renameCssPlugin
	],
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	loader: {
		'.scss': 'css'
	},
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}

